#include "xbm_icon.h"
#include <pgmspace.h>
#include "esp_log.h"

namespace Icons
{
    static const char *TAG = "Icons";
    static constexpr int BITMAP_ARRAY_LEN = 3;
    // 32x32 fox bitmaps (positive)
    static const unsigned char epd_bitmap_fox_32x32_1_p[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x01, 0x20, 0x10, 0x00, 0x02, 0xa8, 0x2c,
        0x00, 0x02, 0x14, 0x44, 0x00, 0x01, 0x13, 0x70, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x10, 0x04,
        0x00, 0x04, 0xa0, 0x04, 0x00, 0x02, 0x80, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x01, 0x04, 0x0a,
        0x00, 0x00, 0x83, 0x10, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x40, 0x31, 0x00, 0x03, 0x60, 0xba,
        0x00, 0x0d, 0x08, 0x08, 0x00, 0x10, 0x06, 0xe0, 0x00, 0x22, 0x00, 0x20, 0x00, 0x44, 0x00, 0x00,
        0x00, 0x40, 0x00, 0x40, 0x00, 0x84, 0xa0, 0x40, 0x03, 0x04, 0x40, 0x80, 0x08, 0x04, 0xa5, 0x40,
        0xe8, 0x0c, 0xa6, 0x00, 0x80, 0x05, 0x08, 0x80, 0x40, 0x14, 0x2a, 0x80, 0x18, 0x22, 0x08, 0x80,
        0x07, 0x84, 0x12, 0x80, 0x00, 0x02, 0x11, 0x00, 0x00, 0x00, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00};

    static const unsigned char epd_bitmap_fox_32x32_2_p[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x00, 0x01, 0x50, 0x14, 0x00, 0x02, 0xa8, 0x2c,
        0x00, 0x02, 0x94, 0x50, 0x00, 0x02, 0x13, 0xf4, 0x00, 0x03, 0x14, 0x0c, 0x00, 0x04, 0x10, 0x94,
        0x00, 0x02, 0xa5, 0x04, 0x00, 0x02, 0xd0, 0x52, 0x00, 0x01, 0x15, 0x0a, 0x00, 0x01, 0x4c, 0x54,
        0x00, 0x00, 0x43, 0x92, 0x00, 0x00, 0x50, 0x0a, 0x00, 0x00, 0x40, 0x31, 0x00, 0x03, 0x61, 0x75,
        0x00, 0x0d, 0x98, 0x08, 0x00, 0x12, 0x06, 0xe0, 0x00, 0x2a, 0xa0, 0x20, 0x00, 0x54, 0x10, 0x20,
        0x00, 0x4d, 0x48, 0x80, 0x00, 0xa4, 0xa0, 0x40, 0x03, 0x55, 0x68, 0xc0, 0x0a, 0x14, 0xa5, 0x00,
        0xe8, 0xad, 0x2e, 0x80, 0x80, 0xaa, 0x22, 0x80, 0x40, 0x55, 0x1a, 0x80, 0x19, 0x24, 0x11, 0x00,
        0x06, 0x85, 0x19, 0x80, 0x00, 0x02, 0x11, 0x00, 0x00, 0x00, 0x19, 0x80, 0x00, 0x00, 0x00, 0x00};

    static const unsigned char epd_bitmap_fox_64x64_1_p[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x67, 0x4e,
        0x00, 0x00, 0x00, 0x1f, 0xfe, 0x20, 0x3f, 0xb8, 0x00, 0x00, 0x00, 0x75, 0xc3, 0x80, 0x00, 0xe0,
        0x00, 0x00, 0x01, 0xc7, 0x10, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x01, 0x2c, 0x44, 0x34, 0x56, 0x00,
        0x00, 0x00, 0x07, 0x4d, 0x12, 0x1f, 0xbc, 0x00, 0x00, 0x00, 0x04, 0x98, 0x49, 0x01, 0x44, 0x00,
        0x00, 0x00, 0x0d, 0x2a, 0x84, 0x80, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x98, 0x28, 0x08, 0x28, 0x00,
        0x00, 0x00, 0x35, 0x55, 0x42, 0x81, 0x08, 0x00, 0x00, 0x00, 0x28, 0x50, 0x11, 0x20, 0x18, 0x00,
        0x00, 0x00, 0x65, 0x55, 0x4a, 0x00, 0x10, 0x00, 0x00, 0x00, 0xd2, 0x53, 0x98, 0x80, 0x30, 0x00,
        0x00, 0x01, 0xa9, 0x70, 0xca, 0x42, 0x20, 0x00, 0x00, 0x03, 0x05, 0x34, 0xf8, 0x00, 0x60, 0x00,
        0x00, 0x06, 0xa9, 0x62, 0x5d, 0x60, 0xe0, 0x00, 0x00, 0x1c, 0x45, 0x34, 0x68, 0xa1, 0xa0, 0x00,
        0x01, 0x72, 0x94, 0xe9, 0x4c, 0x27, 0x60, 0x00, 0xff, 0x80, 0x52, 0x70, 0xc5, 0x7e, 0xa0, 0x00,
        0xa0, 0x02, 0x95, 0xe5, 0x8c, 0x4c, 0x40, 0x00, 0xc0, 0x00, 0xaa, 0xb3, 0x05, 0x45, 0x40, 0x00,
        0x60, 0x11, 0x49, 0xa6, 0x04, 0xc4, 0xc0, 0x00, 0x31, 0x00, 0x25, 0x34, 0x06, 0x46, 0xc0, 0x00,
        0x1c, 0x04, 0x17, 0x24, 0x05, 0x44, 0x80, 0x00, 0x07, 0x20, 0x86, 0x14, 0x02, 0xc6, 0x80, 0x00,
        0x01, 0xc0, 0x38, 0x34, 0x06, 0x44, 0x80, 0x00, 0x00, 0x7f, 0xe0, 0x16, 0x02, 0xc6, 0x80, 0x00,
        0x00, 0x05, 0x00, 0x16, 0x02, 0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x02, 0xc2, 0x80, 0x00,
        0x00, 0x00, 0x00, 0x04, 0x02, 0x43, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xe2, 0x40, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x41, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0xc0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};

    // 32x32 fox bitmaps (negative)
    static const unsigned char epd_bitmap_fox_32x32_1_n[] PROGMEM = {
        // Same data as positive version but inverted
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf3, 0xff, 0xfe, 0xdf, 0xef, 0xff, 0xfd, 0x57, 0xd3,
        0xff, 0xfd, 0xeb, 0xbb, 0xff, 0xfe, 0xec, 0x8f, 0xff, 0xfa, 0xff, 0xf3, 0xff, 0xff, 0xef, 0xfb,
        0xff, 0xfb, 0x5f, 0xfb, 0xff, 0xfd, 0x7f, 0xfd, 0xff, 0xff, 0xb7, 0xfd, 0xff, 0xfe, 0xfb, 0xf5,
        0xff, 0xff, 0x7c, 0xef, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xbf, 0xce, 0xff, 0xfc, 0x9f, 0x45,
        0xff, 0xf2, 0xf7, 0xf7, 0xff, 0xef, 0xf9, 0x1f, 0xff, 0xdd, 0xff, 0xdf, 0xff, 0xbb, 0xff, 0xff,
        0xff, 0xbf, 0xff, 0xbf, 0xff, 0x7b, 0x5f, 0xbf, 0xfc, 0xfb, 0xbf, 0x7f, 0xf7, 0xfb, 0x5a, 0xbf,
        0x17, 0xf3, 0x59, 0xff, 0x7f, 0xfa, 0xf7, 0x7f, 0xbf, 0xeb, 0xd5, 0x7f, 0xe7, 0xdd, 0xf7, 0x7f,
        0xf8, 0x7b, 0xed, 0x7f, 0xff, 0xfd, 0xee, 0xff, 0xff, 0xff, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xff};

    static const unsigned char epd_bitmap_fox_32x32_2_n[] PROGMEM = {
        // Same data as positive version but inverted
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf3, 0xff, 0xfe, 0xaf, 0xeb, 0xff, 0xfd, 0x57, 0xd3,
        0xff, 0xfd, 0x6b, 0xaf, 0xff, 0xfd, 0xec, 0x0b, 0xff, 0xfc, 0xeb, 0xf3, 0xff, 0xfb, 0xef, 0x6b,
        0xff, 0xfd, 0x5a, 0xfb, 0xff, 0xfd, 0x2f, 0xad, 0xff, 0xfe, 0xea, 0xf5, 0xff, 0xfe, 0xb3, 0xab,
        0xff, 0xff, 0xbc, 0x6d, 0xff, 0xff, 0xaf, 0xf5, 0xff, 0xff, 0xbf, 0xce, 0xff, 0xfc, 0x9e, 0x8a,
        0xff, 0xf2, 0x67, 0xf7, 0xff, 0xed, 0xf9, 0x1f, 0xff, 0xd5, 0x5f, 0xdf, 0xff, 0xab, 0xef, 0xdf,
        0xff, 0xb2, 0xb7, 0x7f, 0xff, 0x5b, 0x5f, 0xbf, 0xfc, 0xaa, 0x97, 0x3f, 0xf5, 0xeb, 0x5a, 0xff,
        0x17, 0x52, 0xd1, 0x7f, 0x7f, 0x55, 0xdd, 0x7f, 0xbf, 0xaa, 0xe5, 0x7f, 0xe6, 0xdb, 0xee, 0xff,
        0xf9, 0x7a, 0xe6, 0x7f, 0xff, 0xfd, 0xee, 0xff, 0xff, 0xff, 0xe6, 0x7f, 0xff, 0xff, 0xff, 0xff};

    static const unsigned char epd_bitmap_fox_64x64_1_n[] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x30,
        0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x01, 0x98, 0x00, 0x01, 0x90,
        0x00, 0x00, 0x00, 0x03, 0x4e, 0x00, 0x03, 0x50, 0x00, 0x00, 0x00, 0x02, 0x73, 0x00, 0x06, 0xb0,
        0x00, 0x00, 0x00, 0x06, 0xd9, 0x80, 0x0d, 0xb0, 0x00, 0x00, 0x00, 0x05, 0x8c, 0xc0, 0x19, 0x10,
        0x00, 0x00, 0x00, 0x0c, 0x86, 0x60, 0x15, 0x30, 0x00, 0x00, 0x00, 0x09, 0x83, 0x30, 0x31, 0x30,
        0x00, 0x00, 0x00, 0x0b, 0x01, 0x5f, 0xfd, 0x90, 0x00, 0x00, 0x00, 0x09, 0x01, 0x84, 0x2f, 0x30,
        0x00, 0x00, 0x00, 0x1b, 0x01, 0x21, 0x41, 0x90, 0x00, 0x00, 0x00, 0x11, 0x01, 0x4a, 0x14, 0xd0,
        0x00, 0x00, 0x00, 0x1b, 0x03, 0x10, 0x82, 0x70, 0x00, 0x00, 0x00, 0x11, 0x8a, 0x84, 0x51, 0x30,
        0x00, 0x00, 0x00, 0x1a, 0x86, 0x52, 0x8a, 0x58, 0x00, 0x00, 0x00, 0x08, 0x8c, 0x08, 0x20, 0x10,
        0x00, 0x00, 0x00, 0x0a, 0xd9, 0x52, 0x95, 0x58, 0x00, 0x00, 0x00, 0x0c, 0x72, 0x04, 0x40, 0x08,
        0x00, 0x00, 0x00, 0x05, 0x29, 0x51, 0x15, 0x58, 0x00, 0x00, 0x00, 0x06, 0x45, 0x88, 0x80, 0xa8,
        0x00, 0x00, 0x00, 0x03, 0x20, 0xe5, 0x2a, 0x2c, 0x00, 0x00, 0x00, 0x01, 0xca, 0x70, 0x41, 0xe4,
        0x00, 0x00, 0x00, 0x00, 0x64, 0x9f, 0x16, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x31, 0x05, 0xc3, 0x54,
        0x00, 0x00, 0x00, 0x00, 0x14, 0x52, 0x28, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x82, 0x56,
        0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x0f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x31, 0x08, 0x09, 0x03,
        0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x67, 0x4e, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x20, 0x3f, 0xb8,
        0x00, 0x00, 0x00, 0x75, 0xc3, 0x80, 0x00, 0xe0, 0x00, 0x00, 0x01, 0xc7, 0x10, 0xe0, 0x07, 0x00,
        0x00, 0x00, 0x01, 0x2c, 0x44, 0x34, 0x56, 0x00, 0x00, 0x00, 0x07, 0x4d, 0x12, 0x1f, 0xbc, 0x00,
        0x00, 0x00, 0x04, 0x98, 0x49, 0x01, 0x44, 0x00, 0x00, 0x00, 0x0d, 0x2a, 0x84, 0x80, 0x0c, 0x00,
        0x00, 0x00, 0x18, 0x98, 0x28, 0x08, 0x28, 0x00, 0x00, 0x00, 0x35, 0x55, 0x42, 0x81, 0x08, 0x00,
        0x00, 0x00, 0x28, 0x50, 0x11, 0x20, 0x18, 0x00, 0x00, 0x00, 0x65, 0x55, 0x4a, 0x00, 0x10, 0x00,
        0x00, 0x00, 0xd2, 0x53, 0x98, 0x80, 0x30, 0x00, 0x00, 0x01, 0xa9, 0x70, 0xca, 0x42, 0x20, 0x00,
        0x00, 0x03, 0x05, 0x34, 0xf8, 0x00, 0x60, 0x00, 0x00, 0x06, 0xa9, 0x62, 0x5d, 0x60, 0xe0, 0x00,
        0x00, 0x1c, 0x45, 0x34, 0x68, 0xa1, 0xa0, 0x00, 0x01, 0x72, 0x94, 0xe9, 0x4c, 0x27, 0x60, 0x00,
        0xff, 0x80, 0x52, 0x70, 0xc5, 0x7e, 0xa0, 0x00, 0xa0, 0x02, 0x95, 0xe5, 0x8c, 0x4c, 0x40, 0x00,
        0xc0, 0x00, 0xaa, 0xb3, 0x05, 0x45, 0x40, 0x00, 0x60, 0x11, 0x49, 0xa6, 0x04, 0xc4, 0xc0, 0x00,
        0x31, 0x00, 0x25, 0x34, 0x06, 0x46, 0xc0, 0x00, 0x1c, 0x04, 0x17, 0x24, 0x05, 0x44, 0x80, 0x00,
        0x07, 0x20, 0x86, 0x14, 0x02, 0xc6, 0x80, 0x00, 0x01, 0xc0, 0x38, 0x34, 0x06, 0x44, 0x80, 0x00,
        0x00, 0x7f, 0xe0, 0x16, 0x02, 0xc6, 0x80, 0x00, 0x00, 0x05, 0x00, 0x16, 0x02, 0x42, 0x80, 0x00,
        0x00, 0x00, 0x00, 0x1e, 0x02, 0xc2, 0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02, 0x43, 0xc0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x02, 0xe2, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x41, 0xc0, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00};


    // Make the arrays static and ensure they're properly initialized
    alignas(4) const unsigned char *const epd_bitmap_foxes_positive_array[BITMAP_ARRAY_LEN] = {
        epd_bitmap_fox_32x32_1_p,
        epd_bitmap_fox_32x32_2_p,
        epd_bitmap_fox_64x64_1_p};

    alignas(4) const unsigned char *const epd_bitmap_foxes_negative_array[BITMAP_ARRAY_LEN] = {
        epd_bitmap_fox_32x32_1_n,
        epd_bitmap_fox_32x32_2_n,
        epd_bitmap_fox_64x64_1_n};

    // Public accessors for the array lengths
    const int epd_bitmap_foxes_positive_array_LEN = BITMAP_ARRAY_LEN;
    const int epd_bitmap_foxes_negative_array_LEN = BITMAP_ARRAY_LEN;

    IconInfo getIconXBM(Type type, Polarity polarity)
    {
        ESP_LOGD(TAG, "Getting icon XBM - Type: %d, Polarity: %d", 
                 static_cast<int>(type), static_cast<int>(polarity));
        
        // Initialize with safe defaults
        IconInfo info = {
            nullptr,              // data
            Size::SMALL,         // size
            type,                // type
            polarity,            // polarity
            32,                  // width
            32                   // height
        };

        try {
            // Validate type
            int index = static_cast<int>(type);
            ESP_LOGD(TAG, "Icon index: %d", index);
            
            if (index < 0 || index >= BITMAP_ARRAY_LEN) {
                ESP_LOGE(TAG, "Invalid icon type index: %d", index);
                return info;
            }

            // Get source data with bounds checking
            const unsigned char* sourceData = nullptr;
            if (polarity == Polarity::POSITIVE && epd_bitmap_foxes_positive_array != nullptr) {
                ESP_LOGD(TAG, "Getting positive icon data");
                sourceData = epd_bitmap_foxes_positive_array[index];
            } else if (epd_bitmap_foxes_negative_array != nullptr) {
                ESP_LOGD(TAG, "Getting negative icon data");
                sourceData = epd_bitmap_foxes_negative_array[index];
            }

            if (!sourceData) {
                ESP_LOGE(TAG, "Source data is null");
                return info;
            }

            // Set dimensions based on type
            if (type == Type::FOX_3) {
                info.size = Size::LARGE;
                info.width = info.height = static_cast<u8g2_uint_t>(Size::LARGE);
            } else {
                info.width = info.height = static_cast<u8g2_uint_t>(Size::SMALL);
            }

            // Calculate buffer size
            size_t bufferSize = (info.width * info.height + 7) / 8;
            ESP_LOGD(TAG, "Allocating buffer of size: %u", bufferSize);

            // Allocate memory with error checking
            unsigned char* convertedData = nullptr;
            try {
                convertedData = new unsigned char[bufferSize];
                if (!convertedData) {
                    ESP_LOGE(TAG, "Memory allocation failed");
                    return info;
                }
            } catch (const std::bad_alloc& e) {
                ESP_LOGE(TAG, "Memory allocation exception: %s", e.what());
                return info;
            }

            // Initialize buffer to zero
            memset(convertedData, 0, bufferSize);

            // Convert to XBM format with bounds checking
            ESP_LOGD(TAG, "Converting to XBM format");
            for (size_t i = 0; i < bufferSize; i++) {
                unsigned char byte = pgm_read_byte(&sourceData[i]);
                convertedData[i] = ((byte * 0x0802LU & 0x22110LU) | 
                                  (byte * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
            }

            info.data = convertedData;
            ESP_LOGD(TAG, "XBM conversion successful");

        } catch (const std::exception& e) {
            ESP_LOGE(TAG, "Exception in getIconXBM: %s", e.what());
            if (info.data) {
                delete[] info.data;
                info.data = nullptr;
            }
        }

        return info;
    }

    void freeXBMData(const IconInfo &icon)
    {
        ESP_LOGD(TAG, "Freeing XBM data");
        if (icon.data)
        {
            delete[] icon.data;
            ESP_LOGD(TAG, "XBM data freed successfully");
        }
    }
} // namespace Icons